#LyX 1.6.10 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 2cm
\headsep 2cm
\footskip 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Lecture et représentation d'un programme assembleur MIPS
\end_layout

\begin_layout Author
Emel Hajjem ; Victor Lambret
\end_layout

\begin_layout Date
2011
\end_layout

\begin_layout Abstract
Ce rapport présente la spécification, la réalisation et la procedure de
 recette de notre projet PSESI dont le but est de fournir une représentation
 d'un programme assembleur MIPS et un ensemble de fonctions de manipulation
 de cette représentation.
\end_layout

\begin_layout Abstract
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Abstract
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Spécification
\end_layout

\begin_layout Section
Contexte
\end_layout

\begin_layout Standard
Le but de notre projet est de fournir une représentation d'un programme
 assembleur MIPS.
 Aussi, nous lui ajouterons un ensemble de fonctionnalités de manipulation
 de programme.
 Celles-ci constitueront une brique de base qui permettra des développements
 ultérieurs, notamment dans le but de calculer des temps d'execution ou
 de mettre en oeuvre des techniques d'optimisation ou d'analyse de code.
 Cet outil sera étendu puis utilisé dans le cadre des enseignements de M1
 d'architecture ou de compilation avancée.
 
\end_layout

\begin_layout Standard
Ce projet sera réalisé en binôme, Victor Lambret et Emel Hajjem et encadré
 par Karine Heydemann.
\end_layout

\begin_layout Standard
Il faut savoir que ce projet demande ou developpera des connaissances autour
 des notions suivantes.
\end_layout

\begin_layout Itemize
Le jeu d'instruction MIPS étant donné que l'on va manipuler du code assembleur
 MIPS.
\end_layout

\begin_layout Itemize
Un langage de programmmation qui permettra l'implémentation de la solution
 retenue pour ce projet.
\end_layout

\begin_layout Itemize
L'anglais technique pour la rédaction des commentaires et de la documentation.
\end_layout

\begin_layout Itemize
Des techniques et outils de parsing, qui permettront de lire un fichier
 assembleur.
\end_layout

\begin_layout Itemize
La structure d'un programme assembleur et des notions relatives à la compilation.
\end_layout

\begin_layout Section
Objectifs
\end_layout

\begin_layout Standard
L'objectif du projet est de récupérer un code assembleur MIPS écrit à la
 main ou produit par un compilateur gcc, via un parseur, et de le représenter
 en mémoire grâce à des structures de données.
 Les manipulations de code suivantes sont aussi souhaitées.
\end_layout

\begin_layout Itemize
Modification d'un opérande.
\end_layout

\begin_layout Itemize
Ajout et suppression d'instructions.
\end_layout

\begin_layout Itemize
Calcul de dépendance entre deux instructions.
\end_layout

\begin_layout Itemize
Calcul des blocs de base d'une fonction.
\end_layout

\begin_layout Standard
Enfin l'outil réalisé doit être capable de reproduire le code initial ou
 modifié dans un fichier.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/schéma1.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Schéma de fonctionement de la bibliothèque
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
C'est dans cette perspective que nous allons réaliser une bibliothèque,
 afin qu'un developpeur puisse inclure facilement les fonctionnalités que
 nous proposons dans son programme.
\end_layout

\begin_layout Standard
Il faut donc :
\end_layout

\begin_layout Itemize
créer un parseur qui lira le code assembleur initial dans un fichier,
\end_layout

\begin_layout Itemize
définir et implanter des structures de données appropriées pour la représentatio
n du programme,
\end_layout

\begin_layout Itemize
définir et implanter les opérations de manipulation,
\end_layout

\begin_layout Itemize
fournir une bibliothèque permettant de récupérer la représentation de la
 manipuler et d'en générer un fichier.
\end_layout

\begin_layout Section
Organisation
\end_layout

\begin_layout Subsection
Méthode de travail
\end_layout

\begin_layout Standard
Notre projet consistant à déveloper un même outil à deux avec une interdépendanc
e entre les tâches à réaliser, nous allons utiliser un système de gestion
 de versions pour une collaboration plus aisée.
 De plus, nous allons adopter des méthodes de travail inspirées de l'Extreme
 Programming^[ http://fr.wikipedia.org/wiki/EXtreme_Programming], consistant
 à :
\end_layout

\begin_layout Itemize
privilégier les solutions les plus simples pendant le développement et optimiser
 à la fin du projet en fonction du besoin,
\end_layout

\begin_layout Itemize
découper le travail en cycles de développement courts de manière à intégrer
 au plus vite les changements dans l'archivage,
\end_layout

\begin_layout Itemize
valider le bon fonctionement des différentes parties de la librairie par
 des tests unitaires,
\end_layout

\begin_layout Itemize
définir et utiliser un ensemble de règles communes de codage (nommage, commentai
re...).
\end_layout

\begin_layout Standard
Toute réalisation de code suivra le schéma suivant :
\end_layout

\begin_layout Enumerate
Écriture de tests.
\end_layout

\begin_layout Enumerate
Écriture du code et de la documentation de la classe associée.
\end_layout

\begin_layout Enumerate
Validation par un passage réussi des tests.
\end_layout

\begin_layout Standard
En particulier nous nous répartirons le travail entre l'écriture des tests
 et du code.
\end_layout

\begin_layout Subsection
Liste des taches
\end_layout

\begin_layout Standard
Nous pouvons découper notre travail en trois grandes tâches pour réaliser
 nos objectifs.
\end_layout

\begin_layout Subsubsection
Structures de donnée
\end_layout

\begin_layout Standard
Pour écrire ces structures de données nous avons choisi de les implémenter
 grace au langage C++.
\end_layout

\begin_layout Standard
Mais avant de passer à la programmation, il faut dans un premier temps définir
 ces structures.
 Pour mieux les visualiser, nous allons les représenter dans un diagramme
 UML.
\end_layout

\begin_layout Standard
Comme nous voulons offrir la possibilité de reproduire le code, il faut
 conserver toutes les informations.
 Nous avons donc décider de voir un programme comme un ensemble de lignes.
 Parmis ces lignes, seules celles correspondant aux instructions nous interessen
t.
 Toutefois, pour des developpements ultérieurs, il est utile de pouvoir
 accéder à toutes les informations (toutes les lignes) et donc de conserver
 celles-ci.
 Dans le but d'analyse de code ultérieure, on souhaite connaitre pour chaque
 instruction son code opérateur et pouvoir le modifier, sa nature (opération
 arithmétique ou logique, opération mémoire ou branchement) ainsi que ses
 opérateurs.
 Les opérandes sont soit des registres, des immédiats des expressions ou
 des labels.
 Les labels sont aussi importants, ils indiquent notamment le début des
 fonctions et des certains blocs de base.
 Ainsi, nous avons identifié les entités suivantes pour lesquelles nous
 developperons des structures de données.
\end_layout

\begin_layout Itemize
Programme : entité correspondant à un ensemble de lignes, parmis lesquelles
 nous identifirons celles correspondant aux début de fonction en les conservant
 afin d'avoir un accès direct aux fonctions.
\end_layout

\begin_layout Itemize
Ligne : entité correspondant à une ligne du code asm d'origine, pouvant
 être une directive, une déclaration, un label ou une instruction.
\end_layout

\begin_layout Itemize
Label : entité composée d'un nom.
\end_layout

\begin_layout Itemize
Instruction : entité composée d'un code opération et d'opérandes.
 Nous conservons son format et déduirons son type du code opération.
\end_layout

\begin_layout Itemize
Opérande : entité correspondant à un registre (son numéro), un label (chaîne
 ou identifiant), un immediat (valeur numérique) ou une expression.
\end_layout

\begin_layout Itemize
Découpage en sous-tâches :
\end_layout

\begin_layout Itemize
Diagramme : réalisation du diagramme UML précis des classes utilisées.
\end_layout

\begin_layout Itemize
Classes de base : réalisation des classes Programme, Ligne, Instruction,
 Label et Opérande.
\end_layout

\begin_layout Subsubsection
Implémentation des fonctionnalités de manipulation
\end_layout

\begin_layout Standard
Après avoir défini nos structures de données, nous pourrons passer à la
 définition et à l'implémentation des différentes fonctions qui vont permettre
 de manipuler le code initial.
 
\end_layout

\begin_layout Standard
Découpage en sous-tâches :
\end_layout

\begin_layout Itemize
Calcul de dépendance : réalisation de la fonctionnalité de calcul de dépendance
 entre deux instructions.
\end_layout

\begin_layout Itemize
Index : réalisation de la fonctionnalité de calcul des blocs de base et
 de fonctions d'accès indexées aux lignes du programme par les labels, blocs
 de base ou fonctions.
\end_layout

\begin_layout Itemize
Restitution : réalisation de la fonctionnalité permettant d'écrire la totalité
 ou une partie du programme sous forme d'un fichier d'instructions assembleur.
\end_layout

\begin_layout Subsubsection
Parsing
\end_layout

\begin_layout Standard
Notre projet nécessite un parseur qui fera l'analyse lexicale et syntaxique
 du code assembleur MIPS donné en entrée.
 L'écriture d'un parseur étant une tâche qui prendrait beaucoup de temps,
 nous allons réutiliser un parseur écrit par Mr Pirouz acceptant en entrée
 des fichiers assembleur MIPS produit par gcc.
 Nous aurons à comprendre, puis nettoyer celui-ci avant de modifier les
 actions afin de produire la représentation du programme avec nos structures
 de données.
\end_layout

\begin_layout Standard
Découpage en sous-tâches :
\end_layout

\begin_layout Itemize
Nettoyage : nettoyage du parseur existant pour en conserver les règles d'analyse.
\end_layout

\begin_layout Itemize
Parsing : construction de l'entité programme à partir du parsing d'un fichier
 assembleur.
\end_layout

\begin_layout Subsection
Outils
\end_layout

\begin_layout Standard
Notre projet doit pouvoir être utilisé et adapté facilement, nous allons
 donc le développer grâce à des outils standards et libres :
\end_layout

\begin_layout Itemize
g++ pour compiler la librairie et le code de test(C++),
\end_layout

\begin_layout Itemize
gccpour mips installé via crosstools pour compiler les programmes d'exemples
 écrits en C vers de l'assembleur MIPS,
\end_layout

\begin_layout Itemize
make pour la gestion du projet,
\end_layout

\begin_layout Itemize
un gestionnaire de version comme git,
\end_layout

\begin_layout Itemize
Doxygen pour générer la documentation en anglais à partir de commentaires
 bien écrits dans le code du projet.
\end_layout

\begin_layout Subsection
Planning
\end_layout

\begin_layout Standard
Nos tâches étant assez dépendantes entre elles, nous nous sommes répartis
 le travail pour le démarrage du projet.
 Il nous est assez difficile de donner une estimation précise du temps que
 prendra chaque tâche, c'est pourquoi les tâches suivantes seront attribuées
 en fonction de l'avancement.
\end_layout

\begin_layout Standard
L'ordre de réalisation des tâches sera dicté par les dépendances que nous
 avons identifiées dans ce schéma :
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/planning.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Planning
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Recette
\end_layout

\begin_layout Subsection
Documents fournis
\end_layout

\begin_layout Standard
A la fin de notre projet, nous produirons les documents suivants.
\end_layout

\begin_layout Itemize
Le diagramme de classes UML du projet.
\end_layout

\begin_layout Itemize
Le code de la bibliothèque de base.
\end_layout

\begin_layout Itemize
Le code des classes de tests unitaires et de l'ensemble des outils de test.
\end_layout

\begin_layout Itemize
La documentation de la bibliothèque générée par Doxygen.
\end_layout

\begin_layout Subsection
Procédure de recette
\end_layout

\begin_layout Standard
La librairie produite sera validée par deux procédures de recette.
 Tout d'abord une recette continue composée de test unitaires, de nos revues
 de code et de la validation des étapes par notre encadrante.
\end_layout

\begin_layout Standard
La seconde partie de la recette sera basée sur des scénarios testant chacun
 un ensemble de fonctionnalités.
\end_layout

\begin_layout Subsubsection
Acquisition d'un programme avec le parseur et restitution
\end_layout

\begin_layout Standard
Nous allons écrire trois petits programmes en langage C, typiquement de
 parcours de tableau, de multiplication de matrices ou de tri rapide.
 Ces programmes seront compilés vers de l'assembleur avec gcc puis représentés
 en mémoire en utilisant le parseur avant d'être restitués en assembleur.
 Nous vérifierons que les programmes restitués sont identiques aux programmes
 d'origine, en particulier qu'ils peuvent toujours être compilés et produire
 le même code exécutable.
\end_layout

\begin_layout Subsubsection
Manipulation d'un programme
\end_layout

\begin_layout Standard
A partir de ces trois même programmes d'exemple, nous effectuerons les opération
s suivantes.
\end_layout

\begin_layout Itemize
Affichage des informations générales du programme comme le nombre de lignes
 et d'instructions.
\end_layout

\begin_layout Itemize
Calcul du découpage en blocs de base et en fonctions.
\end_layout

\begin_layout Itemize
Écriture dans un fichier des séquences de lignes de ces blocs de base et
 fonctions dans des fichiers différents.
\end_layout

\begin_layout Subsubsection
Manipulation d'instructions
\end_layout

\begin_layout Standard
Nous allons démontrer les possibilités de manipulation, insertion et suppression
 de lignes en transformant la séquence d'instructions suivante :
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# Code avec des Nor # ligne 1
\end_layout

\begin_layout Plain Layout

add $5, $0, $0 # ligne 2
\end_layout

\begin_layout Plain Layout

or $6, $5, $0 # ligne 3
\end_layout

\begin_layout Plain Layout

nor $4, $5, $6 # ligne 4
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pour obtenir le programme suivant :
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# Equivalence en plusieurs instructions # ligne a
\end_layout

\begin_layout Plain Layout

# ligne b
\end_layout

\begin_layout Plain Layout

lui $4, 0xFFFF # ligne c
\end_layout

\begin_layout Plain Layout

ori $4, $4, 0XFFFF # ligne d
\end_layout

\begin_layout Plain Layout

xor $5, $4, $0 # ligne e
\end_layout

\begin_layout Plain Layout

xor $6, $4, $0 # ligne f
\end_layout

\begin_layout Plain Layout

and $4, $5, $6 # ligne g
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En particulier :
\end_layout

\begin_layout Itemize
le contenu du commentaire de la ligne 1 sera modifié,
\end_layout

\begin_layout Itemize
la ligne 2 sera supprimée,
\end_layout

\begin_layout Itemize
les opérandes et l'opérateur de la ligne 3 seront modifiés pour obtenir
 la ligne c,
\end_layout

\begin_layout Itemize
l'opérateur de la ligne 4 sera modifié pour obtenir la ligne g,
\end_layout

\begin_layout Itemize
les autres lignes seront ensuite insérées dans le programme.
\end_layout

\begin_layout Subsubsection
Calcul de dépendance entre instructions
\end_layout

\begin_layout Standard
En partant de cette séquence d'instructions :
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# Exemple de programme utilisé pour la recette 
\end_layout

\begin_layout Plain Layout

1 lw $4, 0($0)
\end_layout

\begin_layout Plain Layout

2 lw $4, 0($8) # Write after Write avec 1
\end_layout

\begin_layout Plain Layout

3 addi $5, $4, 10 # Read after Write avec 2
\end_layout

\begin_layout Plain Layout

4 sw $4, 0($8)
\end_layout

\begin_layout Plain Layout

5 sub $4, $10, $5 # Write after Read avec 4 et 3
\end_layout

\begin_layout Plain Layout

6 addi $31, $31, 4 # instruction indépendante
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nous effectuerons les opérations suivantes :
\end_layout

\begin_layout Itemize
Calcul et affichage des dépendances entre instructions.
\end_layout

\begin_layout Itemize
Inversion de deux instructions indépendantes.
\end_layout

\begin_layout Itemize
Production du fichier assembleur résultat.
\end_layout

\begin_layout Part
Réalisation
\end_layout

\begin_layout Standard
Une fois les spécifications établies, nous sommes donc passés à la réalisation
 de notre bibliothèque. L'objectif du projet étant de récupérer un code assembleur MIPS écrit à la main ou produit par un compilateur
de type gcc, via un parseur, de le représenter en mémoire et d'effectuer dessus des manipulations, nous avions définit trois grandes taches: Les structures de données, l'implémentation des fonctionnalités de manipulation et le parsing. Nous allons donc vous présenter dans cette partie la réalisations de ces taches.
\end_layout

\begin_layout Section
Classe de bases
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/UML.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Diagramme UML
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La structure de données représente le programme correspondant à tout le contenu d'un fichier assembleur (données, code).
Cette structure vas être découpée en plusieurs classes qui vont réprésenter chacun les différents objets qui caractérisent 
un code assembleur.
Nous avons donc construit nos classes de bases de manière hiérarchique.
Tout d'abord nous avons le programme  que nous avons choisi de voir comme une suite de lignes
 qui peuvent être de différents types : labels, instructions et directives.
Ce sont les instructions qui sont les plus importantes, elles ont chacunes un code opérateur, des opérandes, un format(R,I,J) et une nature (BR, MEM, ALU).
\end_layout

\begin_layout Itemize
Le programme est vu comme une liste chaînée de lignes.
 La classe Node correspond aux noeuds de la liste chaînée.
Dans ce programme, nous pouvons supprimer, ajouter des lignes. Nous pouvons aussi
connaitre le nombre de ligne du programme, l'afficher et chercher une ligne en particulier.
 
\end_layout

\begin_layout Itemize
La classe Line correspond à l'information contenue dans un noeud de la liste
 chaînée.
 C'est une classe abstraite qui permet aux sous-classes Instruction,
 Directive et Label d'hériter de ses caractéristiques. Pour chaque ligne nous avons
la chaîne de caractère. Nous pouvons modifier cette ligne, récupérer la ligne ou son type (instruction, label ou directive).
\end_layout

\begin_layout Itemize
Les directives correspondent aux lignes de déclaration de zone (.data, .text)
 de données, de fonction.
 La directive peut être suivi d'un champs.
 Cette classe peut permettre d'identifier le début et la fin d'une fonction,
 ce qui est utile lors du calcul des fonctions.
 
\end_layout

\begin_layout Itemize
Les labels sont les étiquettes utilisées pour désigner des données ou instructio
ns dans le code.
\end_layout

\begin_layout Itemize
Les instructions correspondent au code proprement dit.
 Une instruction contient un code opérateur, des opérandes, son type et son format.
Dans cette classe nous pouvons récupérer ses caractéristique mais nous ne pouvont modifier
que son code opérateur et ses opérandes car le type et le format sont déduit de l'opérateur et de l'opération.
\end_layout

\begin_layout Itemize
Le code opérateur est représenté par un type énuméré.
\end_layout

\begin_layout Itemize
Les opérandes sont des objets dérivant de la classe abstraite Operand.
 Il y a une classe par type d'opérandes possibles : registre, immediat,
 expression ou label. Pour toutes ces classes nous pouvons modifier l'opérande et la récupérer elle et son type(registre, label...). 
\end_layout

\begin_layout Section
Index
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/UML2.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Diagramme UML index
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout


\begin_layout Standard
La fonctionnalité d'indexation permet d'accéder aux fonctions
 d'un programme et d'accéder aux blocs de bases d'une
 fonctions qui auront été préalablement calculés.
\end_layout

\begin_layout Subsection
Fonction
\end_layout

\begin_layout Standard
Un programme peut contenir plusieurs fonctions. Nous avons donc implémenté une fonctionnalité
permettant de récupérer ces fonctions.
Le calcul des fonctions se fait dans la classe Program qui a une vue d'ensemble
 de tout le code assembleur, donc de toutes les fonctions définies.
 On conserve ces fonctions dans une liste stockées dans le programme correspondant.
La classe Function représente une fonction du programme.
 Elle contient un pointeur sur la ligne début et la ligne de fin de la fonction.
 La classe offre la possibilité d'afficher le contenu de la fonction, de
 restituer le code lui correspondant dans un fichier et calculer sa taille.
\end_layout

\begin_layout Standard
Voici l'algorithme de calcul des fonctions d'un programme :
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

compute_function()
\end_layout

\begin_layout Plain Layout

début
\end_layout

\begin_layout Plain Layout

si le programme n'est pas vide alors
\end_layout

\begin_layout Plain Layout

	tête de la première fonction = tête du programme
\end_layout

\begin_layout Plain Layout

	tant qu'il existe un noeud alors
\end_layout

\begin_layout Plain Layout

		si le noeud contient une directive correspondant à la fin de la fonction
 (.end)
\end_layout

\begin_layout Plain Layout

			ce noeud correspondra à la fin de la fonction
\end_layout

\begin_layout Plain Layout

			on rajoute cette fonction à la liste des fonction dans le programme
\end_layout

\begin_layout Plain Layout

			le noeud suivant sera la tête de la prochaine fonction,
\end_layout

\begin_layout Plain Layout

		fin si
\end_layout

\begin_layout Plain Layout

		si le noeud suivant est le dernier noeud du programme alors
\end_layout

\begin_layout Plain Layout

			le noeud courant corespond à la fin de la fonction
\end_layout

\begin_layout Plain Layout

			on rajoute cette fonction dans la liste des fonctions du programme
\end_layout

\begin_layout Plain Layout

			on sort de la boucle
\end_layout

\begin_layout Plain Layout

		sinon on passe au noeud suivant
\end_layout

\begin_layout Plain Layout

		fin si
\end_layout

\begin_layout Plain Layout

	fin tant que
\end_layout

\begin_layout Plain Layout

fin si
\end_layout

\begin_layout Plain Layout

fin
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Bloc de base
\end_layout


\begin_layout Standard
Dans chacune des fonctions d'un programme il y a plusieurs blocs de bases.
Ces blocs de bases sont des séquences d'instructions contenant un point d'entré et un point de sortie.
La classe Basic_block représente un bloc de base appartenant à une fonction.
 Elle contient un pointeur sur la ligne début (une instruction ou un label)
 et la ligne de fin du bloc.
 On va pouvoir afficher le contenu du bloc, la restituer dans un fichier
 et calculer sa taille.
 Le calcule des blocs de bases se fait dans la classe Function, qui va conserver
 ces blocs dans une liste.
\end_layout

\begin_layout Standard
Voici l'algorithme du calcule des blocs de bases dans une fonction:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

compute_Basic_block()
\end_layout

\begin_layout Plain Layout

début
\end_layout

\begin_layout Plain Layout

	on prend le premier noeud de la fonction qui n'est pas une directive que
 l'on donne à la tête du bloc
\end_layout

\begin_layout Plain Layout

	tant que l'on arrive pas à la fin de la fonction
\end_layout

\begin_layout Plain Layout

		si le noeud contient une instruction
\end_layout

\begin_layout Plain Layout

			si cette instruction est un branchement alors
\end_layout

\begin_layout Plain Layout

				on prend les N prochaines instructions comme fin du bloc (N delay slot)
\end_layout

\begin_layout Plain Layout

				on rajoute ce bloc à la liste des blocs de la fonction
\end_layout

\begin_layout Plain Layout

				si le noeud suivant et celui d'après ne sont pas la fin de la fonction
\end_layout

\begin_layout Plain Layout

					on prend le noeud après le delay slot comme tête du prochain bloc
\end_layout

\begin_layout Plain Layout

					puis on passe au noeud suivant
\end_layout

\begin_layout Plain Layout

				sinon on sort de la boucle
\end_layout

\begin_layout Plain Layout

				fin si
\end_layout

\begin_layout Plain Layout

			fin si
\end_layout

\begin_layout Plain Layout

		fin si
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		si le noeud suivant est un label alors
\end_layout

\begin_layout Plain Layout

			on prend le noeud courant comme fin du bloc
\end_layout

\begin_layout Plain Layout

			on rajoute ce bloc à la liste des blocs de la fonction
\end_layout

\begin_layout Plain Layout

			et on prend le prochain comme tête du prochain bloc
\end_layout

\begin_layout Plain Layout

		fin si
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		si le prochain noeud est une directive
\end_layout

\begin_layout Plain Layout

			on prend le noeud comme fin du bloc
\end_layout

\begin_layout Plain Layout

			on rajoute ce bloc à la liste des blocs de la fonction
\end_layout

\begin_layout Plain Layout

			et on sort
\end_layout

\begin_layout Plain Layout

		fin si
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		si le prochain noeud est la fin de la fonction
\end_layout

\begin_layout Plain Layout

			on prend le noeud comme fin du bloc
\end_layout

\begin_layout Plain Layout

			on rajoute ce bloc à la liste des blocs de la fonction
\end_layout

\begin_layout Plain Layout

			et on sort
\end_layout

\begin_layout Plain Layout

		sinon on passe au noeud suivant
\end_layout

\begin_layout Plain Layout

		fin si
\end_layout

\begin_layout Plain Layout

	fin tant que
\end_layout

\begin_layout Plain Layout

fin
\end_layout

\end_inset


\end_layout

\begin_layout Section
Calcul de dépendance
\end_layout

\begin_layout Standard
Nous avons réalisé la fonctionnalité qui permet de calculer la dépendance
 entre deux instructions.
 Pour cela nous avons implémenté des méthodes correspondant à chacunes des
 dépendances possibles dans la classe Instruction:
\end_layout

\begin_layout Itemize
RAW: détéction des dépendances lecture après ériture, c'est à dire la lecture d'un registre par l'instruction 2 après son écriture dans
l'instruction 1.
\end_layout

\begin_layout Itemize
WAR: détéction des dépendances écriture après lecture, c'est à dire l'écriture dans un registre par l'instruction 2 après sa lecture dans l'instruction 1.
\end_layout

\begin_layout Itemize
WAW: détéction des dépendances écriture après ériture, c'est à dire la l'écriture d'un registre par l'instruction 2 après l'écriture dans l'instruction 1.
\end_layout

\begin_layout Standard
 Ces méthodes testent si la dépendance est verifiée entre l'instruction
 courante et celle donnée en paramètre.
 Nous avons aussi implémenté une méthode permettant de calculer la dépendance
 entre deux instructions particulières dans un programme.
\end_layout

\begin_layout Standard
Voici les algorithmes pour chacun des types de calcul des dépendances :
\end_layout

\begin_layout Subsection
Read after Write
\begin_inset Note Note
status open

\begin_layout Plain Layout
Algos plus génériques, non défini plutôt que null.
 Utiliser des accolades plutôt que des fin si ? 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
Nous avons deux instructions: i1 l'instruction correspondant à la classe et i2 l'argument de la méthode.
RAW(Instruction i2)
\end_layout

\begin_layout Plain Layout

	if (i1.RegDest && i2.RegSrc1 && i1.RegDest==i2.RegSrc1)	return true
\end_layout

\begin_layout Plain Layout

	if (i1.RegDest && i2.RegSrc2 && i1.RegDest==i2.RegSrc2)	return true
\end_layout


\begin_layout Plain Layout

	return false
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

RAW_proposition()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	si le registre destination de la première instruction est défini {
\end_layout

\begin_layout Plain Layout

		si le premier registre source de la seconde instruction est défini {
\end_layout

\begin_layout Plain Layout

			si les deux registres sont égaux alors {
\end_layout

\begin_layout Plain Layout

				retourne vrai
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		si le second registre source de la seconde instruction est défini {		
\end_layout

\begin_layout Plain Layout

			si les deux registres sont égaux alors {
\end_layout

\begin_layout Plain Layout

				retourne vrai
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	retourne faux
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Write after Read
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WAR(Instruction i2)
\end_layout


\begin_layout Plain Layout

	if (i2.RegDest && i1.RegSrc1 && i2.RegDest==i1.RegSrc1)	return true
\end_layout

\begin_layout Plain Layout

	if (i2.RegDest && i1.RegSrc2 && i2.RegDest==i1.RegSrc2)	return true
\end_layout


\begin_layout Plain Layout

	return false
\end_layout


\end_inset


\end_layout

\begin_layout Subsection
Write after Write
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WAW(Instruction i2)
\end_layout

\begin_layout Plain Layout

	if (i1.RegDest && i2.RegDest && i1.RegDest==i2.RegDest)	return true
\end_layout

\begin_layout Plain Layout

	return false
\end_layout


\end_inset


\end_layout

\begin_layout Section
Restitution
\end_layout

\begin_layout Standard
Nous avons réalisé la fonctionnalité qui permet de restituer un programme,
 une fonction ou un bloc de base sous forme d'un fichier d'instruction asssemble
ur.
 La restitution se fait dans une méthode de chacune des classes associée. Ces méthodes
prennent en paramettre le nom du fichier dans lequel on veux écrire. On va parcourir la
structure, récupère la chaîne de caractère de chaque ligne et l'écrit dans le fichier.
\end_layout

\begin_layout Section
Parseur
\end_layout

\begin_layout Subsection
Départ d'un parseur existant
\end_layout

\begin_layout Standard
Nous sommes partis sur un simulateur déjà existant écrit par Mr Pirouz utilisant
 un parseur pour interprêter un code assembleur mips.
 La partie parsing était basée sur lex comme analyseur lexical et yacc comme
 analyseur syntaxique.
 Nous souhaitions récupérer les règles de découpage en mots clés ainsi que
 la grammaire et remplacer tous les actions du parseur par des appels aux
 constructeurs de notre bibliothèque de base.
 
\end_layout

\begin_layout Standard
Dans un premier temps nous avons cherché à isoler le code de ce parseur
 du reste du simulateur afin de le compiler dans un premier temps, puis
 l'adapter à notre besoin.
 Cette étape nous a fait conserver uniquement 3 élements :
\end_layout

\begin_layout Itemize
Les règles dans deux fichiers lex et yacc,
\end_layout

\begin_layout Itemize
une bibliothèque asm contenant les fonctions utiles pour les actions,
\end_layout

\begin_layout Itemize
une biblothèque utl de fonctions de manipulations de données pour le passage
 de données lex à et yacc, ou entre actions.
\end_layout

\begin_layout Standard
Dans un premier temps nous avons commenté les actions existantes pour n'avoir
 qu'un simple affichage du nom de la règle parcourue afin de tester la seule
 compilation du code.
 Cette étape s'étant bien passée, nous avons pensé 
\end_layout

\begin_layout Subsection
Le passage au C++
\end_layout

\begin_layout Standard
Pour que notre parseur fasse appel à des constructeur C++ dans les actions
 nous avons besoin de compiler le fichier yacc avec g++.
 A priori g++ pouvant compiler du C nous avons d'abord cherché à lui faire
 compiler le code passant avec gcc.
 Avant d'y arriver nous avons rencontré deux types de problèmes :
\end_layout

\begin_layout Itemize
g++ est plus exigeant sur les types et n'accepte pas l'ancienne syntaxe
 C pour déclarer les paramètres des fonctions.
 Nous avons donc mis à jour les headers et les corps des fonctions des bibliothè
ques et corrigé les incohérences de type dans le code.
\end_layout

\begin_layout Itemize
L'usage de C++ dans le fichier yacc a posé un problème long à résoudre :
 le mécanisme de dialogue entre Lex et Yacc ne marchait plus.
 Les deux logiciels étant des projets différents, et le support du C++ évoluant
 suivant les versions, l'information ne fut pas facile à trouver.
 Lors de cette étape git fut très utile pour créer une branche par solution
 essayée.
\end_layout

\begin_layout Standard
Une fois ces deux points résolus, nous avons put utiliser C++ librement.
\end_layout

\begin_layout Subsection
Intégration à la bibliothèque
\end_layout

\begin_layout Subsubsection
Adaptations
\end_layout

\begin_layout Standard
Le parseur étant initialement prévu pour de la simulation, son comportement
 n'était pas adapté pour notre besoin de représenter le code d'un programme
 :
\end_layout

\begin_layout Itemize
Les règles initiales transformaient les données au plus tôt pour les mettre
 dans des structures de données dédiées à la simulation, souvent sous forme
 binaire.
 Nous avons cherché à faire remonter les données jusqu'aux règles appelants
 les constructeurs.
 Pour préserver les données comme du texte autant que possible, nous avons
 placé les chaines de caractères (par exemple les labels) dans un tableau
 associatif dynamique puis fait remonter un identifiant numérique, la valeur
 étant ensuite récupérée par le constructeur via cette clé.
\end_layout

\begin_layout Itemize
Les expressions étant évaluées, il aurait été long de chercher à les conserver
 sous forme de chaine de caractère, nous les avons donc conservé sous leur
 forme numérique, perdant en lisibilité sur le code final.
\end_layout

\begin_layout Itemize
L'analyseur lexical gérait plusieurs architectures différentes.
 Nous avons décidé de tout accepter dans notre parseur afin de simplifier
 le test des règles et de reconnaître le plus de codes possibles.
\end_layout

\begin_layout Standard
Comme les règles utilisent tous les constructeurs, nous en avons profité
 pour nous questionner sur les interfaces de nos fonctions.
 Nous avons ainsi put trouver des améliorations pour que notre bibliothèque
 gagne en sûreté et en simplicité.
\end_layout

\begin_layout Subsubsection
Tests
\end_layout

\begin_layout Standard
Afin de vérifier le bon fonctionnement du programme, nous avons créé un
 code complete.s contenant pour chaque règle le code permettant de tester
 tous les cas qu'elle couvre (par exemple, toutes les instructions d'un
 format).
 Ceci nous a permis de tester la bonne restitution et le respect de l'ordre
 des arguments pour chaque cas.
\end_layout

\begin_layout Subsubsection
Fonctionnement final
\end_layout

\begin_layout Standard
Au final, le parseur est appelé par un constructeur de la classe Program
 prenant le nom du fichier source en paramètre.
 Dans le parseur, les règles associées aux instructions, aux labels et aux
 directives instancient les Classes appropriées et les ajouter à un Program
 local au parseur.
\end_layout

\begin_layout Standard
Les macros sont expansées dans le programme par leur suite d'instructions.
 Ceci nous simplifie le reste de la bibliothèque qui n'a pas à gérer les
 pseudos instructions, par exemple pour le calcul de dépendances.
\end_layout

\begin_layout Standard
Une fois le code parsé, on copie les instructions du Program local vers
 le Program appelant.
\end_layout

\begin_layout Part
Recette : à écrire !
\end_layout

\end_body
\end_document
