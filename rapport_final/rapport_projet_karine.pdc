% Lecture et représentation d'un programme assembleur MIPS
% Emel Hajjem ; Victor Lambret
% 2011

<!--\hypersetup{pdfborder=0 0 0} -->

\vspace{3cm}

Ce rapport présente la spécification, la réalisation et la procedure de recette de notre projet PSESI dont le but est de fournir une représentation d'un programme assembleur MIPS et un ensemble de fonctions de manipulation de cette représentation.

\newpage

\tableofcontents

\newpage
######################Chapitre Spécification##########################
# I. Contexte

Le but de notre projet est de fournir une représentation d'un programme assembleur MIPS. Aussi, nous lui ajouterons un  ensemble de fonctionnalités de manipulation de programme. Celles-ci constitueront une brique de base qui permettra des développements ultérieurs, notamment dans le but de calculer des temps d'execution ou de mettre en oeuvre des techniques d'optimisation ou d'analyse de code. Cet outil sera étendu puis utilisé dans le cadre des enseignements de M1 d'architecture ou de compilation avancée.

Ce projet sera réalisé en binôme, Victor Lambret et Emel Hajjem et encadré par Karine Heydemann.

Il faut savoir que ce projet demande ou developpera des connaissances autour des notions suivantes.

- Le jeu d'instruction MIPS étant donné que l'on va manipuler du code assembleur MIPS.
- Un langage de programmmation qui permettra l'implémentation de la solution retenue pour ce projet.
- L'anglais technique pour la rédaction des commentaires et de la documentation.
- Des techniques et outils de parsing, qui permettront de lire un fichier assembleur.
- La structure d'un programme assembleur et des notions relatives à la compilation.

# II. Objectifs

L'objectif du projet est de récupérer un code assembleur MIPS écrit à la main ou produit par un compilateur gcc, via un parseur, et de le représenter en mémoire grâce à des structures de données. Les manipulations de code suivantes sont aussi souhaitées.

- Modification d'un opérande.
- Ajout et suppression d'instructions.
- Calcul de dépendance entre deux instructions.
- Calcul des blocs de base d'une fonction.

Enfin l'outil réalisé doit être capable de reproduire le code initial ou modifié dans un fichier.

![Schema](images/schema1_opti.png) 

C'est dans cette perspective que nous allons réaliser une bibliothèque, afin qu'un developpeur puisse inclure facilement les fonctionnalités que nous proposons dans son programme.

Il faut donc :

- créer un parseur qui lira le code assembleur initial dans un fichier,
- définir et implanter des structures de données appropriées pour la représentation du programme,
- définir et implanter les opérations de manipulation,
- fournir une bibliothèque permettant de récupérer la représentation de la manipuler et d'en générer un fichier.

# III. Organisation

## 1. Méthode de travail

Notre projet consistant à déveloper un même outil à deux avec une interdépendance entre les tâches à réaliser, nous allons utiliser un système de gestion de versions pour une collaboration plus aisée. De plus, nous allons adopter des méthodes de travail inspirées de l'Extreme Programming^[ http://fr.wikipedia.org/wiki/EXtreme_Programming], consistant à :

- privilégier les solutions les plus simples pendant le développement et optimiser à la fin du projet en fonction du besoin,
- découper le travail en cycles de développement courts de manière à  intégrer au plus vite les changements dans l'archivage,
- valider le bon fonctionement des différentes parties de la librairie par des tests unitaires,
- définir et utiliser un ensemble de règles communes de codage (nommage, commentaire...).

Toute réalisation de code suivra le schéma suivant :

1. Écriture de tests.
2. Écriture du code et de la documentation de la classe associée.
3. Validation par un passage réussi des tests.

En particulier nous nous répartirons le travail entre l'écriture des tests et du code.

## 2. Liste des taches

Nous pouvons découper notre travail en trois grandes tâches pour réaliser nos objectifs.

### a. Structures de donnée

Pour écrire ces structures de données nous avons choisi de les implémenter grace au langage C++.
Mais avant de passer à la programmation, il faut dans un premier temps définir ces structures. Pour mieux les visualiser, nous allons les représenter dans un diagramme UML.

Comme nous voulons offrir la possibilité de reproduire le code, il faut conserver toutes les informations. Nous avons donc décider de voir un programme comme un ensemble de lignes. Parmis ces lignes, seules celles correspondant aux instructions nous interessent. Toutefois, pour des developpements ultérieurs, il est utile de pouvoir accéder à toutes les informations (toutes les lignes) et donc de conserver celles-ci. Dans le but d'analyse de code ultérieure, on souhaite connaitre pour chaque instruction son code opérateur et pouvoir le  modifier, sa nature (opération arithmétique ou logique, opération mémoire ou branchement) ainsi que ses opérateurs. Les opérandes sont soit des registres, des immédiats des expressions ou des labels. Les labels sont aussi importants, ils indiquent notamment le début des fonctions et des certains blocs de base. Ainsi, nous avons identifié les entités suivantes pour lesquelles nous developperons des structures de données.

- Programme : entité correspondant à un ensemble de lignes, parmis lesquelles nous identifirons celles correspondant aux début de fonction en les conservant afin d'avoir un accès direct aux fonctions.
- Ligne : entité correspondant à une ligne du code asm d'origine, pouvant être une directive, une déclaration, un label ou une instruction.
- Label : entité composée d'un nom.
- Instruction : entité composée d'un code opération et d'opérandes. Nous conservons son format et déduirons son type du code opération.
- Opérande : entité correspondant à un registre (son numéro), un label (chaîne ou identifiant), un immediat (valeur numérique) ou une expression.

Découpage en sous-tâches :

- **Diagramme** : réalisation du diagramme UML précis des classes utilisées.
- **Classes de base** : réalisation des classes Programme, Ligne, Instruction, Label et Opérande.

### b. Implémentation des fonctionnalités de manipulation

Après avoir défini nos structures de données, nous pourrons passer à la définition et à l'implémentation des différentes fonctions qui vont permettre de manipuler le code initial. 

Découpage en sous-tâches :

- **Calcul de dépendance** : réalisation de la fonctionnalité de calcul de dépendance entre deux instructions.
- **Index** : réalisation de la fonctionnalité de calcul des blocs de base et de fonctions d'accès indexées aux lignes du programme par les labels, blocs de base ou fonctions.
- **Restitution** : réalisation de la fonctionnalité permettant d'écrire la totalité ou une partie du programme sous forme d'un fichier d'instructions assembleur.

### c. Parsing

Notre projet nécessite un parseur qui fera l'analyse lexicale et syntaxique du code assembleur MIPS donné en entrée. L'écriture d'un parseur étant une tâche qui prendrait beaucoup de temps, nous allons réutiliser un parseur écrit par Mr Pirouz acceptant en entrée des fichiers assembleur MIPS produit par gcc. Nous aurons à comprendre, puis nettoyer celui-ci avant de modifier les actions afin de produire la représentation du programme avec nos structures de données.

Découpage en sous-tâches :

- **Nettoyage** : nettoyage du parseur existant pour en conserver les règles d'analyse.
- **Parsing** : construction de l'entité programme à partir du parsing d'un fichier  assembleur.

## 3. Outils

Notre projet doit pouvoir être utilisé et adapté facilement, nous allons donc le développer grâce à des outils standards et libres :

- **g++** pour compiler la librairie et le code de test(C++),
- **gcc** pour mips installé via **crosstools** pour compiler les programmes d'exemples écrits en C vers de l'assembleur MIPS,
- **make** pour la gestion du projet,
- un gestionnaire de version comme **git**^[http://git-scm.com],
- **doxygen**^[www.doxygen.org] pour générer la documentation en anglais à partir de commentaires bien écrits dans le code du projet.

## 4. Planning

Nos tâches étant assez dépendantes entre elles, nous nous sommes répartis le travail pour le démarrage du projet. Il nous est assez difficile de donner une estimation précise du temps que prendra chaque tâche, c'est pourquoi les tâches suivantes seront attribuées en fonction de l'avancement.
L'ordre de réalisation des tâches sera dicté par les dépendances que nous avons identifiées dans ce schéma :

![Schema](images/planning_opti.png) 

# IV. Recette

## 1. Documents fournis

A la fin de notre projet, nous produirons les documents suivants.

- Le diagramme de classes UML du projet.
- Le code de la bibliothèque de base.
- Le code des classes de tests unitaires et de l'ensemble des outils de test.
- La documentation de la bibliothèque générée par Doxygen.

## 2. Procédure de recette

La librairie produite sera validée par deux procédures de recette. Tout d'abord une recette continue composée de test unitaires, de nos revues de code et de la validation des étapes par notre encadrante.

La seconde partie de la recette sera basée sur des scénarios testant chacun un ensemble de fonctionnalités.

### a. Acquisition d'un programme avec le parseur et restitution

Nous allons écrire trois petits programmes en langage C, typiquement de parcours de tableau, de multiplication de matrices ou de tri rapide. Ces programmes seront compilés vers de l'assembleur avec **gcc** puis représentés en mémoire en utilisant le parseur avant d'être restitués en assembleur. Nous vérifierons que les programmes restitués sont identiques aux programmes d'origine, en particulier qu'ils peuvent toujours être compilés et produire le même code exécutable.

### b. Manipulation d'un programme

A partir de ces trois même programmes d'exemple, nous effectuerons les opérations suivantes.

- Affichage des informations générales du programme comme le nombre de lignes et d'instructions.
- Calcul du découpage en blocs de base et en fonctions.
- Écriture dans un fichier des séquences de lignes de ces blocs de base et fonctions dans des fichiers différents.

### c. Manipulation d'instructions

Nous allons démontrer les possibilités de manipulation, insertion et suppression de lignes en transformant la séquence d'instructions suivante :

                # Code avec des Nor							# ligne 1
                add     $5,     $0,     $0					# ligne 2
                or      $6,     $5,     $0					# ligne 3
                nor     $4,     $5,     $6      			# ligne 4

Pour obtenir le programme suivant :

                # Equivalence en plusieurs instructions		# ligne a
															# ligne b
                lui     $4,     0xFFFF						# ligne c
                ori     $4,     $4,     0XFFFF				# ligne d
                xor     $5,     $4,     $0					# ligne e
                xor     $6,     $4,     $0					# ligne f
                and     $4,     $5,     $6					# ligne g

En particulier :

- le contenu du commentaire de la ligne 1 sera modifié,
- la ligne 2 sera supprimée,
- les opérandes et l'opérateur de la ligne 3 seront modifiés pour obtenir la ligne c,
- l'opérateur de la ligne 4 sera modifié pour obtenir la ligne g,
- les autres lignes seront ensuite insérées dans le programme.

### d. Calcul de dépendance entre instructions

En partant de cette séquence d'instructions :

                # Exemple de programme utilisé pour la recette 

               1  lw      $4,     0($0)
               2  lw      $4,     0($8)           # Write after Write avec 1
               3  addi    $5,     $4,     10      # Read after Write avec 2
               4  sw      $4,     0($8)
               5  sub     $4,     $10,    $5      # Write after Read avec 4 et 3
               6  addi    $31,    $31,    4       # instruction indépendante

Nous effectuerons les opérations suivantes :

- Calcul et affichage des dépendances entre instructions.
- Inversion de deux instructions indépendantes.
- Production du fichier assembleur résultat.



##################chapitre Réalisation######################

Une fois les spécifications établies, nous sommes donc passés à la réalisation de notre bibliothèque.

# I. Classe de bases

      AJOUT du DIAGRAMME UML1

Nous avons construit nos classes de bases de manière hiérarchique. Tout d'abord nous avons le programme qui est vu comme une suite de lignes qui peuvent être de différents types : labels, instructions et directives.
-Le programme est vu comme une liste chaînée de lignes. La classe Node correspondra aux noeuds de la liste chaînée. 
-La classe Line corespond à l'information contenue dans un noeud de la liste chaînée. C'est une classe abstraite qui va permettre aux sous-classes Instruction, Directive et Label d'hériter de ses caractéristiques.
-Les directives correspondent aux lignes de déclaration de zone (.data, .text) de données, de fonction. La directive peut être suivi d'un champs. Cette classe pourra permettre d'identifier le début et la fin d'une fonction, ce qui sera utile lors du calcul des fonctions. 
-Les labels sont les étiquettes utilisées pour designer des données ou instructions dans le code.
-Les instructions correspondent au code proprement dit. Une instruction contient une opération et des opérandes. Le type et le format sont déduit de l'opérateur et de l'opération.
L'opération est représentée par un type énuméré.
-Les opérandes sont des objets dérivant de la classe abstraite Operand. Il y a une classe par type d'opérandes possibles : registre, immediat, expression ou label.


# II. Index

	AJOUT du DIAGRAMME UML2

Nous avons crée deux types d'index, l'un permettant d'accéder les fonctions d'un programme et un autre permettant d'accéder les blocs de bases d'une fonctions.

## 1. Fonction

La classe Function représente une fonction du programme. Elle contient un pointeur sur la ligne début et la ligne de fin de la fonction. La classe offre la possibilité d'afficher le contenu de la fonction, de restituer le code lui correspondant dans un fichier et calculer sa taille. Le calcul des fonctions se fait dans la classe Program qui a une vue d'ensemble de toutes le code d'un fichier, donc de toutes les fonctions définies dans le code correspondant. Ce calcul conserve l'ensemble des fonctions du programme dans une liste.
Voici l'algorithme de calcul des fonctions d'un programme :

compute_function()
début

	si le programme n'est pas vide alors
		tête de la première fonction = tête du programme
	
		tant qu'il existe un noeud alors

			 si le noeud contient une directive correspondant à la fin de la fonction (.end)
				ce noued correspondra à la fin de la fonction
				on rajoute cette fonction à la liste des fonction dans le programme
				le noeud suivant sera la tête de la prochaine fonction,
			fin si
			si le noeud suivant est le dernier noeud du programme alors
				le noeud courant corespond à la fin de la fonction
				on rajoute cette fonction dans la liste des fonctions du programme
				on sort de la boucle
			sinon on passe au noeud suivant
			fin si
		fin tant que
	fin si

fin

## 2. Bloc de base

%METTRE LA DEFINITION D'UN BB
La classe Basic_block représente les blocs de bases d'une fonction. Elle contient un pointeur sur la ligne début (une instruction ou un label) et la ligne de fin du bloc.  On va pourra afficher le contenu du bloc, la restituer dans un fichier et calculer sa taille. Le calcule des blocs de bases se fait dans la classe Function, qui va conserver ces blocs dans une liste.
Voici l'algorithme du calcule des blocs de bases dans une fonction:

compute_Basic_block()
début
	
	on prend le premier noeud de la fonction qui n'est pas une directive que l'on donne à la tête du bloc

	tant que l'on arrive pas à la fin de la fonction

		si le noeud contient une instruction
			si cette instruction est un branchement alors
				on prend les N prochaines instructions comme fin du bloc (N delay slot)
				on rajoute ce bloc à la liste des blocs de la fonction
				si le noeud suivant et celui d'après ne sont pas la fin de la fonction
					on prend le noeud après le delay slot comme tête du prochain bloc
					puis on passe au noeud suivant
				sinon on sort de la boucle
				fin si
			fin si
		fin si

        	si le noeud suivant est un label alors
                	 on prend le noeud courant  comme fin du bloc
                	 on rajoute ce bloc à la liste des blocs de la fonction
                	 et on prend le prochain comme tête du prochain bloc
   	         fin si
	        
		 si le prochain noeud est une directive
        	         on prend le noeud comme fin du bloc
                	 on rajoute ce bloc à la liste des blocs de la fonction
  	                 et on sort
 	         fin si
        	
		 si le prochain noeud est la fin de la fonction
                	 on prend le noeud comme fin du bloc
                	 on rajoute ce bloc à la liste des blocs de la fonction
                	 et on sort
        	sinon on passe au noeud suivant
        	fin si

	fin tant que
fin
## 3.Calcul de dépendance

Nous avons réalisé la fonctionnalité qui permet de calculer la dépendance entre deux instructions. Pour cela nous avons implémenté des méthodes correspondant à chacunes des dépendances possibles (RAW, WAR, WAR) dans la classe Instruction. Ces méthodes testent si la dépendance est verifiée entre l'instruction courante et celle donnée en paramètre. Nous avons aussi implémentée une méthode permettant de calculer la dépendance entre deux instructions particulières dans un programme.

Voici les algorithmes pour chacun des types de calcul des dépendances:

RAW()
début

        si le registre destination de la première instruction n'est pas null
                si le premier registre source de la seconde instruction n'est pas null
                        si les deux registres sont égaux alors retourne vrai
                        fin si
                fin si

                si le second registre source de la seconde instruction n'est pas null
                        si les deux registres sont égaux alors retourne vrai
                        fin si
                fin si
        fin si
        retourne faux
fin

WAR()
début

        si le registre destination de la seconde instruction n'est pas null
                si le premier registre source de la première instruction n'est pas null
                        si les deux registres sont égaux alors retourne vrai
                        fin si
                fin si
                si le second registre source de la première instruction n'est pas null
                        si les deux registres sont égaux alors retourne vrai
                        fin si
                fin si
        fin si
        retourne faux
fin

WAW()
début
        si les registres destination de la première et la seconde instrcution sont non null
                s'ils sont égaux alors retourne vrai
                fin si
        fin si
fin




## 4. Restitution

Nous avons réalisé la fonctionnalité qui permet de restituer un programme, une fonction ou un bloc de base sous forme d'un fichier d'instruction asssembleur. La restitution se fait dans une méthode de chacune des classes associée.





